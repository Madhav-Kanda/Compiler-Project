// Mihir

int partition(var data, int left, int right){
    int x = access(data, right);
    int i = left;
    int j = left;
    while(j<right){
        if(access(data,j)<=x){
            print(data);
            int temp = access(data, j);
            assign(data, j, access(data,i));
            assign(data,i,temp);
            i= i+1;
            print(data);
        }
        j = j+1;
    }
    int temp1 = access(data, i);
    assign(data, i, access(data,right));
    assign(data,right,temp1);
    return i;
}

int reccurr(var data, int left, int right,int k){
    if(k>0 and k<= right-left+1){
        int index = partition(data, left,right);
        if(index-1 == k-1){
            return access(data, index);
        }

        if(index-1 > k-1){
            return reccurr(data, left, index-1, k);
        }
        return reccurr(data, index+1, right, k - index+left-1);
    }
}

var data = [1,2,8,6,7];
int leng = length(data);
if(leng%2 == 0){
    print((reccurr(data, 0, leng-1, leng/2)+reccurr(data, 0, leng-1, leng/2+1))/2.0);
}
else{
    print(reccurr(data,0,leng-1,leng/2+1));
}